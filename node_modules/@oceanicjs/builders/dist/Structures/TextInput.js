"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Component_1 = __importDefault(require("./Component"));
const oceanic_js_1 = require("oceanic.js");
class TextInput extends Component_1.default {
    customID;
    label;
    maxLength;
    minLength;
    placeholder;
    required;
    style;
    value;
    constructor(style, label, customID) {
        super(oceanic_js_1.ComponentTypes.TEXT_INPUT);
        this.style = style;
        this.label = label;
        this.customID = customID;
    }
    /** this method is meant to be for internal use only, don't use it, as it may break or change at a moments notice */
    load(style, label, customID, placeholder, value, minLength, maxLength, required) {
        if (style) {
            this.setStyle(style);
        }
        if (label) {
            this.setLabel(label);
        }
        if (customID) {
            this.setCustomID(customID);
        }
        if (placeholder) {
            this.setPlaceholder(placeholder);
        }
        if (value) {
            this.setValue(value);
        }
        if (minLength) {
            this.setLength(minLength, undefined);
        }
        if (maxLength) {
            this.setLength(undefined, maxLength);
        }
        if (typeof required !== "undefined") {
            this.setRequired(required);
        }
        return this;
    }
    /**
     * Set the custom id of this text input.
     * @param customID A developer-defined identifier for the input, max 100 characters.
     */
    setCustomID(customID) {
        this.customID = customID;
        return this;
    }
    /**
     * Set the label of this text input.
     * @param label The label to display on this text input.
     */
    setLabel(label) {
        this.label = label;
        return this;
    }
    /**
     * Set the minimum/maximum length of this text input.
     * @param min The minimum length.
     * @param max The maximum length.
     */
    setLength(min, max) {
        if (min) {
            this.minLength = min;
        }
        if (max) {
            this.maxLength = max;
        }
        return this;
    }
    /**
     * Make this text input optional.
     */
    setOptional() {
        this.required = false;
        return this;
    }
    /**
     * Set the placeholder of this text input.
     * @param placeholder Custom placeholder text if nothing is selected, max 100 characters.
     */
    setPlaceholder(placeholder) {
        this.placeholder = placeholder;
        return this;
    }
    /**
     * Make this text input required.
     * @param required If this text input should be required or not - default true, setOptional also exists.
     */
    setRequired(required = true) {
        this.required = required;
        return this;
    }
    /**
     * Set the style of this text input.
     * @param style The [style](https://discord.com/developers/docs/interactions/message-components#text-inputs-text-input-styles) of this text input.
     */
    setStyle(style) {
        this.style = style;
        return this;
    }
    /**
     * Set the initial value of this text input.
     * @param value A pre-filled value for this component, max 4000 characters.
     */
    setValue(value) {
        this.value = value;
        return this;
    }
    toJSON() {
        return {
            type: this.type,
            customID: this.customID,
            style: this.style,
            label: this.label,
            minLength: this.minLength,
            maxLength: this.maxLength,
            required: this.required,
            value: this.value,
            placeholder: this.placeholder
        };
    }
    toJSONRaw() {
        return {
            type: this.type,
            custom_id: this.customID,
            style: this.style,
            label: this.label,
            min_length: this.minLength,
            max_length: this.maxLength,
            required: this.required,
            value: this.value,
            placeholder: this.placeholder
        };
    }
}
exports.default = TextInput;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGV4dElucHV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL1N0cnVjdHVyZXMvVGV4dElucHV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsNERBQW9DO0FBQ3BDLDJDQUFvRztBQUVwRyxNQUFxQixTQUFVLFNBQVEsbUJBQW9DO0lBQ3ZFLFFBQVEsQ0FBUztJQUNqQixLQUFLLENBQVM7SUFDZCxTQUFTLENBQVU7SUFDbkIsU0FBUyxDQUFVO0lBQ25CLFdBQVcsQ0FBVTtJQUNyQixRQUFRLENBQVc7SUFDbkIsS0FBSyxDQUFrQjtJQUN2QixLQUFLLENBQVU7SUFDZixZQUFZLEtBQXNCLEVBQUUsS0FBYSxFQUFFLFFBQWdCO1FBQy9ELEtBQUssQ0FBQywyQkFBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzdCLENBQUM7SUFFRCxvSEFBb0g7SUFDNUcsSUFBSSxDQUFDLEtBQXVCLEVBQUUsS0FBYyxFQUFFLFFBQWlCLEVBQUUsV0FBb0IsRUFBRSxLQUFjLEVBQUUsU0FBa0IsRUFBRSxTQUFrQixFQUFFLFFBQWtCO1FBQ3JLLElBQUksS0FBSyxFQUFFO1lBQ1AsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN4QjtRQUNELElBQUksS0FBSyxFQUFFO1lBQ1AsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN4QjtRQUNELElBQUksUUFBUSxFQUFFO1lBQ1YsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUM5QjtRQUNELElBQUksV0FBVyxFQUFFO1lBQ2IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNwQztRQUNELElBQUksS0FBSyxFQUFF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
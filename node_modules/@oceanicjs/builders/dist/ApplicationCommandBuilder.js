"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ApplicationCommandOptionBuilder_1 = __importDefault(require("./ApplicationCommandOptionBuilder"));
const oceanic_js_1 = require("oceanic.js");
const permissionNames = Object.keys(oceanic_js_1.Permissions).filter(p => !/^[0-9]+$/.test(p));
class ApplicationCommandBuilder {
    defaultMemberPermissions;
    description;
    descriptionLocalizations;
    dmPermission;
    name;
    nameLocalizations;
    options = [];
    type;
    constructor(type, name) {
        this.type = type;
        this.name = name;
    }
    /**
     * Add a description localization.
     * @param locale The [locale](https://discord.com/developers/docs/reference#locales) of the localization.
     * @param description The localized description.
     */
    addDescriptionLocalization(locale, description) {
        (this.descriptionLocalizations ??= {})[locale] = description;
        return this;
    }
    /**
     * Add a name localization.
     * @param locale The [locale](https://discord.com/developers/docs/reference#locales) of the localization.
     * @param name The localized name.
     */
    addNameLocalization(locale, name) {
        (this.nameLocalizations ??= {})[locale] = name;
        return this;
    }
    addOption(...args) {
        if (args.length === 1) {
            if (args[0] instanceof ApplicationCommandOptionBuilder_1.default) {
                args[0] = args[0].toJSON();
            }
            this.options.push(args[0]);
            return this;
        }
        else {
            const [name, type, extra] = args;
            const option = new ApplicationCommandOptionBuilder_1.default(type, name);
            if (extra) {
                if (typeof extra === "function") {
                    extra.call(this, option);
                    this.options.push(option.toJSON());
                }
                else {
                    this.options.push({ ...extra, name, type });
                }
            }
            else {
                this.options.push(option.toJSON());
            }
            return this;
        }
    }
    /** Allow this command to be used in direct messages. */
    allowDMUsage() {
        this.setDMPermission(true);
        return this;
    }
    /** Disallow this command from being used in direct messages. */
    disallowDMUsage() {
        this.setDMPermission(false);
        return this;
    }
    /** Set if this command can be used in direct messages. */
    setDMPermission(dmPermission) {
        this.dmPermission = dmPermission;
        return this;
    }
    /** Set the default permissions required to use this command. */
    setDefaultMemberPermissions(...permissions) {
        let data;
        if (permissions.length > 1 || (typeof permissions[0] === "string" && permissionNames.includes(permissions[0]))) {
            data = permissions;
        }
        else {
            data = permissions[0];
        }
        if (data instanceof oceanic_js_1.Permission) {
            data = data.allow.toString();
        }
        else if (typeof data === "bigint") {
            data = data.toString();
        }
        else if (Array.isArray(data)) {
            data = data.map(perm => oceanic_js_1.Permissions[perm]).reduce((a, b) => a | b, 0n).toString();
        }
        this.defaultMemberPermissions = data;
        return this;
    }
    /** Set the description of this command. */
    setDescription(description) {
        this.description = description;
        return this;
    }
    /**
     * Set the description localizations for this command.
     * @param localizations A map of [locales](https://discord.com/developers/docs/reference#locales) to localized description strings.
     */
    setDescriptionLocalizations(localizations) {
        this.descriptionLocalizations = localizations;
        return this;
    }
    /** Set the name of this command.*/
    setName(name) {
        this.name = name;
        return this;
    }
    /**
     * Set the name localizations for this command.
     * @param localizations A map of [locales](https://discord.com/developers/docs/reference#locales) to localized name strings.
     */
    setNameLocalizations(localizations) {
        this.nameLocalizations = localizations;
        return this;
    }
    /** Convert this command to JSON. */
    toJSON() {
        return {
            defaultMemberPermissions: this.defaultMemberPermissions,
            description: this.description,
            descriptionLocalizations: this.descriptionLocalizations,
            dmPermission: this.dmPermission,
            name: this.name,
            nameLocalizations: this.nameLocalizations,
            options: this.options,
            type: this.type
        };
    }
}
exports.default = ApplicationCommandBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBwbGljYXRpb25Db21tYW5kQnVpbGRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9BcHBsaWNhdGlvbkNvbW1hbmRCdWlsZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsd0dBQWdGO0FBQ2hGLDJDQVFvQjtBQUVwQixNQUFNLGVBQWUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLHdCQUFXLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsRixNQUFxQix5QkFBeUI7SUFDMUMsd0JBQXdCLENBQVU7SUFDbEMsV0FBVyxDQUFVO0lBQ3JCLHdCQUF3QixDQUEwQjtJQUNsRCxZQUFZLENBQVc7SUFDdkIsSUFBSSxDQUFTO0lBQ2IsaUJBQWlCLENBQTBCO0lBQzNDLE9BQU8sR0FBcUMsRUFBRSxDQUFDO0lBQy9DLElBQUksQ0FBSTtJQUNSLFlBQVksSUFBTyxFQUFFLElBQVk7UUFDN0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCwwQkFBMEIsQ0FBQyxNQUFjLEVBQUUsV0FBbUI7UUFDMUQsQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEtBQUssRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsV0FBVyxDQUFDO1FBQzdELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsbUJBQW1CLENBQUMsTUFBYyxFQUFFLElBQVk7UUFDNUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEtBQUssRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQy9DLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFLRCxTQUFTLENBQTBFLEdBQUcsSUFB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
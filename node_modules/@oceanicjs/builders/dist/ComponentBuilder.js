"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ActionRow_1 = __importDefault(require("./Structures/ActionRow"));
const Button_1 = __importDefault(require("./Structures/Button"));
const SelectMenu_1 = __importDefault(require("./Structures/SelectMenu"));
const TextInput_1 = __importDefault(require("./Structures/TextInput"));
const oceanic_js_1 = require("oceanic.js");
const SelectMenuTypeValues = [oceanic_js_1.ComponentTypes.STRING_SELECT, oceanic_js_1.ComponentTypes.USER_SELECT, oceanic_js_1.ComponentTypes.ROLE_SELECT, oceanic_js_1.ComponentTypes.MENTIONABLE_SELECT, oceanic_js_1.ComponentTypes.CHANNEL_SELECT];
const UniqueRowNeeded = [...SelectMenuTypeValues, oceanic_js_1.ComponentTypes.TEXT_INPUT];
class ComponentBuilder {
    currentIndex = 0;
    rows = [];
    rowMax = 5;
    constructor(rowMax) {
        if (rowMax) {
            this.rowMax = rowMax;
        }
    }
    /**
     * Convert an emoji to a partial.
     * @param emoji The unicode point of the emoji if default, else the fully qualified emoji.
     * @param type `default` if built in (unicode), `custom` otherwise (this can be assumed from the format by us).
     * @example emojiToPartial("üêæ", "default")
     * @example emojiToPartial("<:paws8:681748079778463796>", "custom")
     */
    static emojiToPartial(emoji, type = "custom") {
        if (type === "default") {
            return {
                id: null,
                name: emoji,
                animated: false
            };
        }
        else {
            const [, anim, name, id] = /^<?(a)?:(.*):([\d]{15,21})>?$/.exec(emoji) ?? [];
            if (!name || !id) {
                return this.emojiToPartial(emoji, "default");
            }
            return {
                id,
                name,
                animated: anim === "a"
            };
        }
    }
    getCurrentRow() {
        return (this.rows[this.currentIndex] || (this.rows[this.currentIndex] = new ActionRow_1.default()));
    }
    /**
     * Add a component to the current row, or a new row depending on certain conditions
     * @param component The component to add.
     */
    addComponent(component) {
        const cur = this.getCurrentRow();
        if (UniqueRowNeeded.includes(component.type)) {
            if (cur.isEmpty()) {
                cur.addComponent(component);
                this.addRow();
            }
            else {
                this.addRow([component]).addRow();
            }
        }
        else {
            if (cur.size >= this.rowMax) {
                this.addRow([component]);
            }
            else {
                cur.addComponent(component);
            }
        }
        return this;
    }
    /**
     * Add several components.
     * @param components The components to add.
     */
    addComponents(...components) {
        components.map(c => this.addComponent(c));
        return this;
    }
    /**
     * Add an interaction button to the current row.
     * @param options The options for adding the interaction button.
     */
    addInteractionButton(options) {
        this.addComponent(new Button_1.default(options.style, options.customID)["load"](options.style, options.customID, options.label, options.emoji, options.disabled));
        return this;
    }
    /**
     * Start a new action row.
     * @param components The components to start this new row with.
     */
    addRow(components = []) {
        this.currentIndex++;
        this.rows.push(new ActionRow_1.default().addComponents(...components));
        return this;
    }
    /**
     * Add a select menu (to the current row, if empty - else as a new row).
     * @param options The options for adding the select menu.
     */
    addSelectMenu(options) {
        this.addComponent(new SelectMenu_1.default(options.type, options.customID)["load"](options.customID, options.options, options.placeholder, options.minValues, options.maxValues, options.disabled));
        return this;
    }
    /**
     * Add a text input to the current row.
     * @param options The options for adding the text input.
     * @returns
     */
    addTextInput(options) {
        this.addComponent(new TextInput_1.default(options.style, options.label, options.customID)["load"](options.style, options.label, options.customID, options.placeholder, options.value, options.minLength, options.maxLength, options.required));
        return this;
    }
    /**
     * Add a url button to the current row
     * @param options The options for adding the url button.
     */
    addURLButton(options) {
        this.addComponent(new Button_1.default(oceanic_js_1.ButtonStyles.LINK, options.url)["load"](oceanic_js_1.ButtonStyles.LINK, options.url, options.label, options.emoji, options.disabled));
        return this;
    }
    /**
     * Remove all of the rows that are empty.
     */
    removeEmptyRows() {
        this.rows.forEach((row, index) => {
            if (row.size === 0) {
                this.rows.splice(index, 1);
            }
        });
        this.currentIndex = this.rows.length - 1;
        return this;
    }
    setRowMax(rowMax) {
        this.rowMax = rowMax;
        return this;
    }
    /** convert the current contents to JSON */
    toJSON() {
        return this.removeEmptyRows().rows.map(row => row.toJSON());
    }
    /** convert the current contents to JSON */
    toJSONRaw() {
        return this.removeEmptyRows().rows.map(row => row.toJSONRaw());
    }
}
exports.default = ComponentBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tcG9uZW50QnVpbGRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9Db21wb25lbnRCdWlsZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsdUVBQStDO0FBQy9DLGlFQUF5QztBQUN6Qyx5RUFBaUQ7QUFDakQsdUVBQStDO0FBRS9DLDJDQVdvQjtBQUtwQixNQUFNLG9CQUFvQixHQUFHLENBQUMsMkJBQWMsQ0FBQyxhQUFhLEVBQUUsMkJBQWMsQ0FBQyxXQUFXLEVBQUUsMkJBQWMsQ0FBQyxXQUFXLEVBQUUsMkJBQWMsQ0FBQyxrQkFBa0IsRUFBRSwyQkFBYyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3RMLE1BQU0sZUFBZSxHQUFHLENBQUMsR0FBRyxvQkFBb0IsRUFBRSwyQkFBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBRTdFLE1BQXFCLGdCQUFnQjtJQUN6QixZQUFZLEdBQUcsQ0FBQyxDQUFDO0lBQ2pCLElBQUksR0FBcUIsRUFBRSxDQUFDO0lBQ3BDLE1BQU0sR0FBVyxDQUFDLENBQUM7SUFDbkIsWUFBWSxNQUFlO1FBQ3ZCLElBQUksTUFBTSxFQUFFO1lBQ1IsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7U0FDeEI7SUFDTCxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFhLEVBQUUsT0FBNkIsUUFBUTtRQUN0RSxJQUFJLElBQUksS0FBSyxTQUFTLEVBQUU7WUFDcEIsT0FBTztnQkFDSCxFQUFFLEVBQVEsSUFBSTtnQkFDZCxJQUFJLEVBQU0sS0FBSztnQkFDZixRQUFRLEVBQUUsS0FBSzthQUNsQixDQUFDO1NBQ0w7YUFBTTtZQUNILE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUcsK0JBQStCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUM3RSxJQUFJLENBQUMsSUFBSSxJQUFJ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
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const oceanic_js_1 = require("oceanic.js");
class EmbedBuilder {
    json = {};
    static loadFromJSON(json, forceSingular) {
        if (Array.isArray(json)) {
            const val = json.map(v => EmbedBuilder.loadFromJSON(v));
            return forceSingular ? val[0] : val;
        }
        else {
            return new EmbedBuilder().load(json);
        }
    }
    /**
     * load json into this embed builder instance - use static loadFromJSON method
     * @private
     * @param {EmbedOptions} json - the json to load
     * @returns {this}
     */
    load(json) {
        this.json = json;
        return this;
    }
    /**
     * Add a blank field to the embed (zero width spaces).
     * @param inline If the field should be displayed inline.
     */
    addBlankField(inline) {
        return this.addField("\u200b", "\u200b", inline);
    }
    /**
     * Add a field to the embed.
     * @param name The field name.
     * @param value The field value.
     * @param inline If the field should be inline.
     */
    addField(name, value, inline) {
        this.json.fields = [...(this.json.fields ?? []), { name, value, inline }];
        return this;
    }
    /**
     * Add multiple fields.
     * @param fields - the fields to add
     */
    addFields(...fields) {
        fields.forEach(arg => this.addField(arg.name, arg.value, arg.inline));
        return this;
    }
    /**
     * Get the current author.
     */
    getAuthor() {
        return this.json.author;
    }
    /**
     * Get the current color.
     */
    getColor() {
        return this.json.color;
    }
    /**
     * Get the current description.
     */
    getDescription() {
        return this.json.description;
    }
    /**
     * Get the field at the specified index.
     * @param index The index of the field to get.
     */
    getField(index) {
        return (this.json.fields ?? [])[index];
    }
    /**
     * Get the current fields.
     */
    getFields() {
        return (this.json.fields ?? []);
    }
    /**
     * Get the current footer.
     */
    getFooter() {
        return this.json.footer;
    }
    /**
     * Get the current image.
     */
    getImage() {
        return this.json.image;
    }
    /**
     * Get the current thumbnail.
     */
    getThumbnail() {
        return this.json.thumbnail;
    }
    /**
     * Get the current timestamp.
     */
    getTimestamp() {
        return this.json.timestamp;
    }
    /**
     * Get the current timestamp as a date instance.
     */
    getTimestampDate() {
        return !this.json.timestamp ? undefined : new Date(this.json.timestamp);
    }
    /**
     * Get the current title.
     */
    getTitle() {
        return this.json.title;
    }
    /**
     * Get the current url.
     */
    getURL() {
        return this.json.url;
    }
    /**
     * remove the current author
     * @returns {this}
     */
    removeAuthor() {
        this.json.author = undefined;
        return this;
    }
    /**
     * Remove the current color.
     */
    removeColor() {
        this.json.color = undefined;
        return this;
    }
    /**
     * Remove the current description.
     */
    removeDescription() {
        this.json.description = undefined;
        return this;
    }
    /**
     * Remove the current footer.
     */
    removeFooter() {
        this.json.footer = undefined;
        return this;
    }
    /**
     * Remove the current image.
     */
    removeImage() {
        this.json.image = undefined;
        return this;
    }
    /**
     * Remove the current thumbnail.
     */
    removeThumbnail() {
        this.json.thumbnail = undefined;
        return this;
    }
    /**
     * Remove the current timestamp.
     */
    removeTimestamp() {
        this.json.timestamp = undefined;
        return this;
    }
    /**
     * Remove the current title.
     */
    removeTitle() {
        this.json.title = undefined;
        return this;
    }
    /**
     * Remove the current url.
     */
    removeURL() {
        this.json.url = undefined;
        return this;
    }
    /**
     * set the embed author
     * @param name The name of the author.
     * @param iconURL An icon url for the author.
     * @param url A url for the author.
     */
    setAuthor(name, iconURL, url) {
        this.json.author = {
            name,
            iconURL,
            url
        };
        return this;
    }
    /**
     * Set the embed color.
     * @param color The color.
     */
    setColor(color) {
        this.json.color = color;
        return this;
    }
    /**
     * Set the embed description.
     * @param value The description. A string, array of strings, or both spread across multiple parameters. They will be joined by LF charactes.
     */
    setDescription(first, ...other) {
        this.json.description = [...(Array.isArray(first) ? first : [first]), ...(other.map(o => [...(Array.isArray(o) ? o : [o])].join("\n")))].join("\n");
        return this;
    }
    /**
     * Set the embed footer.
     * @param text - The text.
     * @param iconURL - The icon url.
     */
    setFooter(text, iconURL) {
        this.json.footer = { text, iconURL };
        return this;
    }
    /**
     * Set the embed image.
     * @param url The Image url.
     */
    setImage(url) {
        this.json.image = { url };
        return this;
    }
    /**
     * Set the embed thumbnail.
     * @param url The thumbnail url.
     */
    setThumbnail(url) {
        this.json.thumbnail = { url };
        return this;
    }
    /**
     * Set the embed timestamp.
     * @param time An ISO 8601 timestamp, Date object, or "now".
     */
    setTimestamp(time) {
        if (time === "now") {
            time = new Date().toISOString();
        }
        else if (time instanceof Date) {
            time = time.toISOString();
        }
        this.json.timestamp = time;
        return this;
    }
    /**
     * Set the embed title.
     * @param title The title.
     */
    setTitle(title) {
        this.json.title = title;
        return this;
    }
    /**
     * Set the embed url.
     * @param url The url.
     */
    setURL(url) {
        this.json.url = url;
        return this;
    }
    toJSON(array = false) {
        return array ? [this.json] : this.json;
    }
    toJSONRaw(array = false) {
        const [embed] = oceanic_js_1.Util.prototype.embedsToRaw([this.json]);
        return array ? [embed] : embed;
    }
}
exports.default = EmbedBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW1iZWRCdWlsZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0VtYmVkQnVpbGRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJDQVFvQjtBQUNwQixNQUFxQixZQUFZO0lBQ3JCLElBQUksR0FBaUIsRUFBRSxDQUFDO0lBUWhDLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBd0MsRUFBRSxhQUF1QjtRQUNqRixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDckIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4RCxPQUFPLGFBQWEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7U0FDdkM7YUFBTTtZQUNILE9BQU8sSUFBSSxZQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDeEM7SUFDTCxDQUFDO0lBQ0Q7Ozs7O09BS0c7SUFDSyxJQUFJLENBQUMsSUFBa0I7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVEOzs7T0FHRztJQUNILGFBQWEsQ0FBQyxNQUFnQjtRQUMxQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxRQUFRLENBQUMsSUFBWSxFQUFFLEtBQWEsRUFBRSxNQUFnQjtRQUNsRCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxL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